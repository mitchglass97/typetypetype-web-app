[{"/home/mitch/Code/typetypetype-webapp/client/src/index.js":"1","/home/mitch/Code/typetypetype-webapp/client/src/App.js":"2","/home/mitch/Code/typetypetype-webapp/client/src/components/Header.js":"3","/home/mitch/Code/typetypetype-webapp/client/src/components/Leaderboard.js":"4","/home/mitch/Code/typetypetype-webapp/client/src/components/Home.js":"5","/home/mitch/Desktop/for pushing to github repo/typetypetype-webapp/client/src/index.js":"6","/home/mitch/Desktop/for pushing to github repo/typetypetype-webapp/client/src/App.js":"7","/home/mitch/Desktop/for pushing to github repo/typetypetype-webapp/client/src/components/Header.js":"8","/home/mitch/Desktop/for pushing to github repo/typetypetype-webapp/client/src/components/Home.js":"9","/home/mitch/Desktop/for pushing to github repo/typetypetype-webapp/client/src/components/Leaderboard.js":"10"},{"size":260,"mtime":1613191230468,"results":"11","hashOfConfig":"12"},{"size":456,"mtime":1613332301436,"results":"13","hashOfConfig":"12"},{"size":1077,"mtime":1613341323463,"results":"14","hashOfConfig":"12"},{"size":5196,"mtime":1613341325814,"results":"15","hashOfConfig":"12"},{"size":8518,"mtime":1613342102957,"results":"16","hashOfConfig":"12"},{"size":260,"mtime":1613191230468,"results":"17","hashOfConfig":"18"},{"size":456,"mtime":1613332301436,"results":"19","hashOfConfig":"18"},{"size":1077,"mtime":1613341323463,"results":"20","hashOfConfig":"18"},{"size":8518,"mtime":1613342102957,"results":"21","hashOfConfig":"18"},{"size":5196,"mtime":1613341325814,"results":"22","hashOfConfig":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"12dmo6k",{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"25"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"25"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9raom8",{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/mitch/Code/typetypetype-webapp/client/src/index.js",[],["48","49"],"/home/mitch/Code/typetypetype-webapp/client/src/App.js",["50"],"import React, {Fragment} from 'react';\nimport Home from \"./components/Home\";\nimport Leaderboard from \"./components/Leaderboard\";\nimport Header from \"./components/Header\";\nimport './App.css';\nimport {Route} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Route exact path=\"/\" component={Home} />\n      <Route exact path=\"/leaderboard\" component={Leaderboard} />\n    </div>\n  );\n}\n\nexport default App;\n","/home/mitch/Code/typetypetype-webapp/client/src/components/Header.js",["51"],"// Navigation bar on top of website\n// Includes logo as well as links to Home, Leaderboard, and GitHub repo\n\nimport React, {Fragment, useState} from \"react\";\nimport {Link} from \"react-router-dom\";\n\nconst Header = () => {\n\n    return( \n    <Fragment>\n        <ul id=\"header\" class=\"d-flex justify-content-between align-items-center\">\n            <div>\n                <li id='title'>\n                    <h1>\n                        <Link className='logo-link' to=\"/\" >\n                            type<span class='dark'>type</span>type\n                        </Link>\n                        </h1>\n                </li>\n            </div>\n            <div class=\"d-flex align-items-center\">\n                <li><Link className='text-link' to=\"/\" >Home</Link></li>\n                <li><Link className='text-link' to=\"/leaderboard\">Leaderboard</Link></li>\n                <li>\n                    <a className='text-link' href=\"https://github.com/mitchglass97\">GitHub</a>\n                    </li>\n            </div>\n        </ul>\n    </Fragment>\n    );\n}\n\nexport default Header;","/home/mitch/Code/typetypetype-webapp/client/src/components/Leaderboard.js",["52","53"],"// Leaderboard page\n// Displays a table of all scores that have been submitted by users.\n// The scores data is obtained by making a GET request to the server. The server then queries the PostgreSQL database.\n// Table columns are: Name, WPM, Accuracy, Date\n// The table can be sorted by clicking on any of the column headers, which are buttons (e.g. Name)\n\nimport React, {Fragment, useEffect, useState } from 'react';\nimport moment from \"moment\"; // used to format TIMESTAMPS from postgreSQL e.g. turns \"2013-03-01T00:00:00+01:00\" into \"6/9/2014\" .. https://devhints.io/moment\n\nconst Leaderboard = () => {\n\n    const [scores, setScores] = useState(['', '', '', '']);\n    const [sortConfig, setSortConfig] = useState({key: 'WPM', direction: 'ascending'}); // used to sort table based on user input\n    const [load, setLoad] = useState('false'); // load is set to false until the response to our fetch request is received. \n\n    useEffect(() => {\n        getLeaderboard();\n    },[]);\n    \n    // MAKE A GET REQUEST TO THE SERVER FOR ALL SCORES IN THE DATABASE\n    const getLeaderboard = async () => {\n        try {\n            //const response = await fetch(\"http://localhost:5000/leaderboard\"); // local\n            const response = await fetch(\"https://typetypetype-webapp.herokuapp.com/api/leaderboard\"); //heroku\n            const jsonData = await response.json();\n            setLoad('true');\n            setScores(jsonData);\n        } catch (error) {\n            console.log(error);    \n        }\n    }\n\n    // when user clicks on a table header (e.g. Name), sortConfig stores the column that the user clicked in the key variable\n    // direction variable is ascending by default. It is changed to descending if the user clicks on the same table\n    // header twice in a row.\n    const requestSort = (key) => { \n        let direction = 'ascending';\n        if (\n            sortConfig &&\n            sortConfig.key === key &&\n            sortConfig.direction === 'ascending'\n        ) {\n            direction = 'descending';\n        }\n        setSortConfig({ key, direction });};\n\n    // Sort the table based on sortConfig variable\n    // useEffect triggered whenever the variable SortConfig changes, which occurs when user\n    // clicks on any of the table column headers\n        useEffect(() => {\n        let temp = scores;\n        // Sort by: Name\n        if(sortConfig.key === 'user_name') {\n            temp = scores.sort(function(a, b) {\n                var nameA = a.user_name.toUpperCase(); // ignore upper and lowercase\n                var nameB = b.user_name.toUpperCase(); // ignore upper and lowercase\n                if (nameA < nameB) {\n                    return -1;\n                }\n                if (nameA > nameB) {\n                    return 1;\n                }\n                return 0;\n            }).reverse();} \n\n        // Sort by: WPM\n        else if(sortConfig.key === 'WPM') {\n            temp = scores.sort(function(a, b) {\n                return a.wpm - b.wpm;\n            }).reverse();} \n\n        // Sort by: Accuracy\n        else if(sortConfig.key === 'accuracy') {\n            temp = scores.sort(function(a, b) {\n                return a.accuracy - b.accuracy;\n            }).reverse();} \n\n        // sorting by id (same result as sorting by date)\n        else if(sortConfig.key === 'id') {\n            temp = scores.sort(function(a, b) {\n                return a.id - b.id;\n            }).reverse();}\n\n        // reverse the table. this occurs when user clicks the same table heading (e.g. Name) twice.\n        if(sortConfig.direction === 'descending') {\n            temp = temp.reverse();\n        }\n\n        setScores([...temp]); // have to spread the array otherwise React won't re-render\n    }, [sortConfig.key, sortConfig.direction]);\n\n    // only load table once we have received a response from server to our GET request\n    if(load == 'true') {\n        return (\n    <Fragment>\n        <table class=\"table\">\n            <thead class=\"thead-dark\">\n                <tr>\n                    <th><button class=\"btn btn-table\" onClick={() => requestSort('user_name')}>Name</button></th>\n                    <th><button class=\"btn btn-table\" onClick={() => requestSort('WPM')}>WPM (Words Per Minute)</button></th>\n                    <th><button class=\"btn btn-table\" onClick={() => requestSort('accuracy')}>Accuracy</button></th>\n                    <th><button class=\"btn btn-table\" onClick={() => requestSort('id')}>Date</button></th>\n                </tr>\n            </thead>\n            <tbody>\n                {scores.map(score => (\n                    <tr>\n                        <td>{score.user_name}</td>\n                        <td>{Math.round(score.wpm)}</td>\n                        <td>{Math.round(score.accuracy)} %</td>\n                        <td>{moment(score.posting_date).format('l')  }</td>\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n    </Fragment>\n    )\n    } else {\n        // don't load the table until load = true, which happens once the fetch request to server has completed \n        return (\n            <Fragment>\n            </Fragment>\n        )\n    }\n};\n\nexport default Leaderboard;","/home/mitch/Code/typetypetype-webapp/client/src/components/Home.js",["54","55","56","57","58","59"],"// Home page\n// Displays the text that user will type for the typing speed test.\n// Displays stats (WPM and Accuracy) and calculates stats on each keystroke.\n// Displays a button for user to start the test. This button also serves as a Restart button after test is completed.\n\n// As user types, each character input is compared to the \"current\" character of the testText string. If the \n// user-inputted character is correct, the character fades away via CSS animation. If the letter is wrong,\n// the character turns red.\n\n// After test is done, user is prompted to enter their name. After submitting name, their score and name is sent\n// to the database via a POST request. The scores are viewable on a sortable table on the Leaderboard page.\n\nimport React, { Fragment, useState} from 'react';\nimport $ from 'jquery'; // need jquery to use lettering.js library\nimport lettering from \"letteringjs\"; // lettering.js library, used to animate individual letters by turning each character in a text string into its own <span> element\n\nconst testText = \"Jim and Anne will be in charge of the spring field day to be held in early June. They will ask their friends' aid to get set up. There will be games for the boys and girls. The children will want to hike, ride their bikes, and swim. This yearly event will be held in the new Peach Grove Park. Ruth has work to do on the plans for food for the day. Last year Ruth spent most of her time helping the two cooks with many snacks. Hot dogs, fries, soft drinks, ice cream, and candy apples were big sellers. Apple pie and ice cream sold well too. I hope Ruth serves the same food this year. George Long will hire the band and singer for the day. A great jazz band will play. George's mom leads the group. The jazz band is sure to be one of the big hits. George is to have them play from one to four and also in the evening. The fine songs they will play are sure to please all of us. Nice gifts will be given to all of the winners in each of the events. Local news coverage will include television and newspapers. Joyce Scott will take care of the pictures for the school paper and yearbook. Maybe the national news will do a short story on the tenth annual spring field day. The jazz band is sure to be one of the big hits.\";\nlet buttonText = \"Click to Start Timer\";\nlet begin = false; // boolean variable used to track whether the test has begun\nlet currChar = 0; // tracks the current character, which is used to iterate through testText. increment ONLY when user enters the correct character \nlet charsTyped = 0; // total # of keystrokes\nlet mistakeCount = 0; // # of incorrect keystrokes\nlet seconds = -3; // initialize to -3 for 3-second countdown. begin test when seconds = 0. end when seconds = 60.\nlet leaderboardCheck = false;\nlet restart = false;\nlet timerBool = false; // boolean for when timer is started (otherwise can create multiple timers by spamming button)\n\nconst Home = () => {\n    const [buttonText, updateButtonText] = useState(\"Click to Start\");\n    const [wpmValue, updateWPMValue] = useState(0);\n    const [accuracy, updateAccuracy] = useState(0)\n\n    function update() {\n\n        // Calculate stats (WPM and Accuracy)\n        let tempAccuracy = (charsTyped-mistakeCount)/charsTyped;\n        let tempWPM = 0;\n        if(begin) {\n            // calculate accuracy \n            if( isNaN(tempAccuracy) ) {\n                tempAccuracy = 0; \n            } \n            tempAccuracy=Math.round(100*tempAccuracy);\n            updateAccuracy(tempAccuracy);\n\n            // calculate WPM\n            if(seconds > 60) {\n                seconds = 60;\n            }\n            if((currChar > 0) && (seconds>0)) {\n                tempWPM = (currChar/5) / (seconds/ 60);\n                tempWPM = Math.round(tempWPM*tempAccuracy/100);\n                updateWPMValue(tempWPM); \n            }\n        }\n\n        // update buttonText (shows time left)\n        if(seconds<0) {\n            let tempseconds = Math.abs(seconds);\n            updateButtonText(\"Test begins in \" + tempseconds + \"...\");\n        } else if(seconds == 0) {\n            updateButtonText(\"1:00\");\n        } else if(seconds <= 50) {\n            updateButtonText(\"0:\" + (60-seconds));\n        } else if(seconds < 60) {\n            updateButtonText(\"0:0\" + (60-seconds));\n        } \n        // timer is done \n        else {\n            restart = true;\n            if(leaderboardCheck == false) {\n                updateButtonText(\"0:00\");\n\n                // pop-up window when  test is done. show results of test and\n                // prompt user for a name. if user enters a name and submits form, then send the data to server via a POST request\n                let result = window.prompt(\"Good job! Here are your final stats.\\nWPM (Words Per Minute): \" + tempWPM + \"\\nAccuracy: \" + tempAccuracy + \"% (\" + mistakeCount + \" incorrect characters out of \" + charsTyped + \" total keystrokes)\\nEnter your name below to be added to the leaderboard!\");\n                if(result != null) {\n                    const data = { user_name: result, WPM: tempWPM, accuracy: tempAccuracy};\n                    fetch('https://typetypetype-webapp.herokuapp.com/leaderboard', { \n                        method: 'POST', \n                        headers: {\n                            'Content-Type': 'application/json',\n                        },\n                        body: JSON.stringify(data),\n                        })\n                        .then(response => response.json())\n                        .then(data => {\n                        console.log('Success:', data);\n                        })\n                        .catch((error) => {\n                        console.error('Error:', error);\n                        });\n                }\n            }\n            updateButtonText(\"RESTART\");\n            leaderboardCheck = true;\n        }\n        \n        \n    }\n\n    // 1 second timer\n    function countSecond() {\n        seconds++;\n        update(); \n        // set begin to true after 3 second countdown (because seconds initialized to -3)\n        if(seconds==0 && begin===false) {\n            begin = true;\n        }\n    }\n\n    // function when button is clicked\n    function testButton() {\n        // start timer the first time button is clicked\n        if(timerBool === false) {\n            setInterval(countSecond, 1000); // create a 1-second timer\n        }\n        timerBool = true;\n        if(restart) {\n            window.location.reload(false); // refresh page if user clicks button after test has ended\n        }\n        $(\".fancy\").lettering(); // lettering.js library. turns every character in string into a <span> element so they can be inidivudally animated\n        update();\n    }\n    \n    // listen for input (key strokes)\n    document.onkeypress = function(e){\n\n        // don't do anything with keystrokes until test has begun\n        if(begin) {\n            \n            charsTyped++; // increment total character count\n\n            // Compare user-inputted character to the current character in the testText string\n            // User has entered the correct character \n            if(e.key == testText[currChar]) {\n                document.getElementsByClassName(`char${currChar+1}`).item(0).classList.remove(\"wrong\");\n                document.getElementsByClassName(`char${currChar+1}`).item(0).classList.add(\"animate\");\n                currChar++; // increment the current character\n                update();\n            } \n            // User has entered the incorrect character\n            else {\n                mistakeCount++;\n                document.getElementsByClassName(`char${currChar+1}`).item(0).classList.add(\"wrong\");\n                update();\n            }\n        }\n    };\n\n    return(\n        <Fragment>\n        <div class=\"d-flex flex-column align-items-center\">\n            <div id='stats-container'>\n                <div id='stats'>\n                    <ul id='stats-list'>\n                        <li class ='blur'>WPM: <span id='wpm'>{wpmValue}</span></li>\n                        <li class ='blur'>Accuracy: <span id='accuracy'>{accuracy}</span>%</li>\n                        <li><button type=\"button\" class=\"btn btn-test\" onClick={testButton}><span id='timer'>{buttonText}</span></button></li>\n                    </ul>\n                </div>\n            </div>\n\n            <div id='sentence' class='dark fancy'>\n                <p id='sentence-text'>{testText}</p>\n            </div>\n        </div>\n    </Fragment>\n    )\n}\n\nexport default Home;","/home/mitch/Desktop/for pushing to github repo/typetypetype-webapp/client/src/index.js",[],"/home/mitch/Desktop/for pushing to github repo/typetypetype-webapp/client/src/App.js",["60"],"/home/mitch/Desktop/for pushing to github repo/typetypetype-webapp/client/src/components/Header.js",["61"],"/home/mitch/Desktop/for pushing to github repo/typetypetype-webapp/client/src/components/Home.js",["62","63","64","65","66","67"],"/home/mitch/Desktop/for pushing to github repo/typetypetype-webapp/client/src/components/Leaderboard.js",["68","69"],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":1,"column":16,"nodeType":"76","messageId":"77","endLine":1,"endColumn":24},{"ruleId":"74","severity":1,"message":"78","line":4,"column":26,"nodeType":"76","messageId":"77","endLine":4,"endColumn":34},{"ruleId":"79","severity":1,"message":"80","line":90,"column":8,"nodeType":"81","endLine":90,"endColumn":46,"suggestions":"82"},{"ruleId":"83","severity":1,"message":"84","line":93,"column":13,"nodeType":"85","messageId":"86","endLine":93,"endColumn":15},{"ruleId":"74","severity":1,"message":"87","line":15,"column":8,"nodeType":"76","messageId":"77","endLine":15,"endColumn":17},{"ruleId":"74","severity":1,"message":"88","line":18,"column":5,"nodeType":"76","messageId":"77","endLine":18,"endColumn":15},{"ruleId":"83","severity":1,"message":"84","line":61,"column":27,"nodeType":"85","messageId":"86","endLine":61,"endColumn":29},{"ruleId":"83","severity":1,"message":"84","line":71,"column":33,"nodeType":"85","messageId":"86","endLine":71,"endColumn":35},{"ruleId":"83","severity":1,"message":"84","line":107,"column":19,"nodeType":"85","messageId":"86","endLine":107,"endColumn":21},{"ruleId":"83","severity":1,"message":"84","line":136,"column":22,"nodeType":"85","messageId":"86","endLine":136,"endColumn":24},{"ruleId":"74","severity":1,"message":"75","line":1,"column":16,"nodeType":"76","messageId":"77","endLine":1,"endColumn":24},{"ruleId":"74","severity":1,"message":"78","line":4,"column":26,"nodeType":"76","messageId":"77","endLine":4,"endColumn":34},{"ruleId":"74","severity":1,"message":"87","line":15,"column":8,"nodeType":"76","messageId":"77","endLine":15,"endColumn":17},{"ruleId":"74","severity":1,"message":"88","line":18,"column":5,"nodeType":"76","messageId":"77","endLine":18,"endColumn":15},{"ruleId":"83","severity":1,"message":"84","line":61,"column":27,"nodeType":"85","messageId":"86","endLine":61,"endColumn":29},{"ruleId":"83","severity":1,"message":"84","line":71,"column":33,"nodeType":"85","messageId":"86","endLine":71,"endColumn":35},{"ruleId":"83","severity":1,"message":"84","line":107,"column":19,"nodeType":"85","messageId":"86","endLine":107,"endColumn":21},{"ruleId":"83","severity":1,"message":"84","line":136,"column":22,"nodeType":"85","messageId":"86","endLine":136,"endColumn":24},{"ruleId":"79","severity":1,"message":"80","line":90,"column":8,"nodeType":"81","endLine":90,"endColumn":46,"suggestions":"89"},{"ruleId":"83","severity":1,"message":"84","line":93,"column":13,"nodeType":"85","messageId":"86","endLine":93,"endColumn":15},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"no-unused-vars","'Fragment' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'scores'. Either include it or remove the dependency array.","ArrayExpression",["92"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'lettering' is defined but never used.","'buttonText' is assigned a value but never used.",["93"],"no-global-assign","no-unsafe-negation",{"desc":"94","fix":"95"},{"desc":"94","fix":"96"},"Update the dependencies array to be: [sortConfig.key, sortConfig.direction, scores]",{"range":"97","text":"98"},{"range":"99","text":"98"},[3738,3776],"[sortConfig.key, sortConfig.direction, scores]",[3738,3776]]